{"ast":null,"code":"var _jsxFileName = \"/Users/vitorsantos/Galileu/Projeto_Front_End/vs-foodwish-proj2022/src/ReusableComponents/CatalogComp/CatalogPage.jsx\";\nimport React, { useState } from 'react';\nimport './catalogPage.css';\nimport Modal from '../modalComp/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CatalogPage(props) {\n  /* const [currentPage, setCurrentPage] = useState(1)\n   const [modalFirstState, setModaFirstlState] = useState(\"modalContainer1\") \n   const [modalSecondState] = useState(\"modalContainer\")\n    const productsPerPage = 6\n    const maxPageLimit = 3\n    const minPageLimit = 1\n    const changePage = (page) => { // identifica a página em que o utilizador clicou\n       setCurrentPage(page.target.id)\n   } \n    const previousBtn = () => {\n       if(currentPage - 1 <  minPageLimit){\n           setCurrentPage(minPageLimit)\n       } else {\n           setCurrentPage(currentPage - 1)\n       }\n   }\n    const nextBtn = () => {\n       if(currentPage + 1 > maxPageLimit){\n           setCurrentPage(minPageLimit)\n       } else {\n           setCurrentPage(currentPage + 1)\n       }\n   }\n    const pages = []\n    for(let i = 1; i <= Math.ceil(props.products.length / productsPerPage); ++i) {\n       pages.push(i)\n   }\n    const indexlastProduct = currentPage * productsPerPage \n    const indexFirstProduct = indexlastProduct - productsPerPage\n    let [currentProductId, setCurrentProductId] = useState(1) \n    const currentMeals = props.products.slice(indexFirstProduct, indexlastProduct)\n   \n   const product = currentMeals.filter((product) => product.id == currentProductId)\n    const openProduct = (product) => {\n       if(modalFirstState == \"modalContainer1\"){\n           setModaFirstlState(modalSecondState)\n           setCurrentProductId(product.id)\n       } else {\n           setModaFirstlState(\"modalContainer1\")\n       }\n   }\n    const closeProduct = () => {\n       setModaFirstlState(\"modalContainer1\")\n   }\n    const renderProducts = product => { // renderiza todos os cards dos produtos na view\n       \n       \n       return(\n           <ul className=\"itemsCatalog\">\n               {\n                   product.map((product, index) => {\n                       return (\n                           <li \n                           className=\"isolatedItems\"\n                           key={index}\n                           id={product.id} \n                           onClick={() => openProduct(product)}\n                           >\n                               <h2>{product.name}</h2>\n                               <img src={product.image} alt={product.name}/>\n                           </li>\n                       )\n                   } )\n               }  \n           </ul>\n       )\n   }\n    const renderPageNumbers = pages.map(number => { // renderiza o layout de mudança de página e suas animações\n       if(number < maxPageLimit + 1 && number >= minPageLimit){\n           return (\n               <li\n               className={currentPage == number ? \"activePage\": \"disabePage\"}\n               key={number} \n               id={number}\n               onClick={changePage}\n               >\n               .\n               </li>\n           )\n       } else {\n           return null\n       }\n   })\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"itemsContainer\",\n    children: [currentMeals => renderProducts(currentMeals), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"paginateContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        class: \"previousBtn\",\n        onClick: props.previousBtn,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"12\",\n          cy: \"12\",\n          r: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n          points: \"12 8 8 12 12 16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"16\",\n          y1: \"12\",\n          x2: \"10.5\",\n          y2: \"12\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), props.renderPageNumbers, /*#__PURE__*/_jsxDEV(\"svg\", {\n        class: \"nextBtn\",\n        onClick: props.nextBtn,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        \"stroke-width\": \"2\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"12\",\n          cy: \"12\",\n          r: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n          points: \"12 16 16 12 12 8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"8\",\n          y1: \"12\",\n          x2: \"13.5\",\n          y2: \"12\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), product.map(product => /*#__PURE__*/_jsxDEV(Modal, {\n      id: product.id,\n      name: product.name,\n      image: product.image,\n      meal: product.meal,\n      description: product.description,\n      extras: product.extras,\n      price: product.price,\n      stock: product.stock,\n      hide: modalFirstState,\n      closeProduct: closeProduct,\n      checkBoxOnChange: props.checkBoxOnChange,\n      saveUserExtras: props.saveUserExtras,\n      getExtras: props.getExtras,\n      product: product\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 13\n  }, this);\n}\n_c = CatalogPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CatalogPage\");","map":{"version":3,"sources":["/Users/vitorsantos/Galileu/Projeto_Front_End/vs-foodwish-proj2022/src/ReusableComponents/CatalogComp/CatalogPage.jsx"],"names":["React","useState","Modal","CatalogPage","props","currentMeals","renderProducts","previousBtn","renderPageNumbers","nextBtn","product","map","id","name","image","meal","description","extras","price","stock","modalFirstState","closeProduct","checkBoxOnChange","saveUserExtras","getExtras"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAExC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBI,sBACQ;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,eACUC,YAAD,IAAkBC,cAAc,CAACD,YAAD,CADzC,eAEA;AAAI,MAAA,SAAS,EAAC,mBAAd;AAAA,8BACI;AAAK,QAAA,KAAK,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAED,KAAK,CAACG,WAAxC;AAAsD,QAAA,OAAO,EAAC,WAA9D;AAA2E,QAAA,IAAI,EAAC,MAAhF;AAAwF,QAAA,MAAM,EAAC,cAA/F;AAA+G,wBAAa,GAA5H;AAAiI,0BAAe,OAAhJ;AAAyJ,2BAAgB,OAAzK;AAAA,gCACI;AAAQ,UAAA,EAAE,EAAC,IAAX;AAAgB,UAAA,EAAE,EAAC,IAAnB;AAAwB,UAAA,CAAC,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAU,UAAA,MAAM,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAM,UAAA,EAAE,EAAC,IAAT;AAAc,UAAA,EAAE,EAAC,IAAjB;AAAsB,UAAA,EAAE,EAAC,MAAzB;AAAgC,UAAA,EAAE,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAMKH,KAAK,CAACI,iBANX,eAOI;AAAK,QAAA,KAAK,EAAC,SAAX;AAAqB,QAAA,OAAO,EAAEJ,KAAK,CAACK,OAApC;AAA8C,QAAA,OAAO,EAAC,WAAtD;AAAmE,QAAA,IAAI,EAAC,MAAxE;AAAgF,QAAA,MAAM,EAAC,cAAvF;AAAuG,wBAAa,GAApH;AAAyH,0BAAe,OAAxI;AAAiJ,2BAAgB,OAAjK;AAAA,gCACI;AAAQ,UAAA,EAAE,EAAC,IAAX;AAAgB,UAAA,EAAE,EAAC,IAAnB;AAAwB,UAAA,CAAC,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAU,UAAA,MAAM,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAM,UAAA,EAAE,EAAC,GAAT;AAAa,UAAA,EAAE,EAAC,IAAhB;AAAqB,UAAA,EAAE,EAAC,MAAxB;AAA+B,UAAA,EAAE,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,EAgBQC,OAAO,CAACC,GAAR,CAAYD,OAAO,iBACf,QAAC,KAAD;AACI,MAAA,EAAE,EAAEA,OAAO,CAACE,EADhB;AAEI,MAAA,IAAI,EAAEF,OAAO,CAACG,IAFlB;AAGI,MAAA,KAAK,EAAEH,OAAO,CAACI,KAHnB;AAII,MAAA,IAAI,EAAEJ,OAAO,CAACK,IAJlB;AAKI,MAAA,WAAW,EAAEL,OAAO,CAACM,WALzB;AAMI,MAAA,MAAM,EAAEN,OAAO,CAACO,MANpB;AAOI,MAAA,KAAK,EAAEP,OAAO,CAACQ,KAPnB;AAQI,MAAA,KAAK,EAAER,OAAO,CAACS,KARnB;AASI,MAAA,IAAI,EAAEC,eATV;AAUI,MAAA,YAAY,EAAEC,YAVlB;AAWI,MAAA,gBAAgB,EAAEjB,KAAK,CAACkB,gBAX5B;AAYI,MAAA,cAAc,EAAElB,KAAK,CAACmB,cAZ1B;AAaI,MAAA,SAAS,EAAEnB,KAAK,CAACoB,SAbrB;AAcI,MAAA,OAAO,EAAEd;AAdb;AAAA;AAAA;AAAA;AAAA,YADJ,CAhBR;AAAA;AAAA;AAAA;AAAA;AAAA,UADR;AAsCH;KA9IuBP,W","sourcesContent":["import React, { useState } from 'react'\nimport './catalogPage.css'\nimport Modal from '../modalComp/Modal'\n\nexport default function CatalogPage(props) {\n\n   /* const [currentPage, setCurrentPage] = useState(1)\n\n   const [modalFirstState, setModaFirstlState] = useState(\"modalContainer1\") \n\n   const [modalSecondState] = useState(\"modalContainer\")\n\n    const productsPerPage = 6\n\n    const maxPageLimit = 3\n\n    const minPageLimit = 1\n\n    const changePage = (page) => { // identifica a página em que o utilizador clicou\n        setCurrentPage(page.target.id)\n    } \n\n    const previousBtn = () => {\n        if(currentPage - 1 <  minPageLimit){\n            setCurrentPage(minPageLimit)\n        } else {\n            setCurrentPage(currentPage - 1)\n        }\n    }\n\n    const nextBtn = () => {\n        if(currentPage + 1 > maxPageLimit){\n            setCurrentPage(minPageLimit)\n        } else {\n            setCurrentPage(currentPage + 1)\n        }\n    }\n\n    const pages = []\n\n    for(let i = 1; i <= Math.ceil(props.products.length / productsPerPage); ++i) {\n        pages.push(i)\n    }\n\n    const indexlastProduct = currentPage * productsPerPage \n\n    const indexFirstProduct = indexlastProduct - productsPerPage\n\n    let [currentProductId, setCurrentProductId] = useState(1) \n\n    const currentMeals = props.products.slice(indexFirstProduct, indexlastProduct)\n    \n    const product = currentMeals.filter((product) => product.id == currentProductId)\n\n    const openProduct = (product) => {\n        if(modalFirstState == \"modalContainer1\"){\n            setModaFirstlState(modalSecondState)\n            setCurrentProductId(product.id)\n        } else {\n            setModaFirstlState(\"modalContainer1\")\n        }\n    }\n\n    const closeProduct = () => {\n        setModaFirstlState(\"modalContainer1\")\n    }\n\n    const renderProducts = product => { // renderiza todos os cards dos produtos na view\n        \n        \n        return(\n            <ul className=\"itemsCatalog\">\n                {\n                    product.map((product, index) => {\n                        return (\n                            <li \n                            className=\"isolatedItems\"\n                            key={index}\n                            id={product.id} \n                            onClick={() => openProduct(product)}\n                            >\n                                <h2>{product.name}</h2>\n                                <img src={product.image} alt={product.name}/>\n                            </li>\n                        )\n                    } )\n                }  \n            </ul>\n        )\n    }\n\n    const renderPageNumbers = pages.map(number => { // renderiza o layout de mudança de página e suas animações\n        if(number < maxPageLimit + 1 && number >= minPageLimit){\n            return (\n                <li\n                className={currentPage == number ? \"activePage\": \"disabePage\"}\n                key={number} \n                id={number}\n                onClick={changePage}\n                >\n                .\n                </li>\n            )\n        } else {\n            return null\n        }\n    })\n    */\n    return (\n            <div className=\"itemsContainer\">\n                    {(currentMeals) => renderProducts(currentMeals)}\n            <ul className=\"paginateContainer\">\n                <svg class=\"previousBtn\" onClick={props.previousBtn}  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\">  \n                    <circle cx=\"12\" cy=\"12\" r=\"10\" />  \n                    <polyline points=\"12 8 8 12 12 16\" />  \n                    <line x1=\"16\" y1=\"12\" x2=\"10.5\" y2=\"12\" />\n                </svg>\n                {props.renderPageNumbers}\n                <svg class=\"nextBtn\" onClick={props.nextBtn}  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\">  \n                    <circle cx=\"12\" cy=\"12\" r=\"10\" />  \n                    <polyline points=\"12 16 16 12 12 8\" />  \n                    <line x1=\"8\" y1=\"12\" x2=\"13.5\" y2=\"12\" />\n                </svg>\n            </ul>\n                {\n                    product.map(product => \n                        <Modal \n                            id={product.id}\n                            name={product.name}\n                            image={product.image}\n                            meal={product.meal}\n                            description={product.description}\n                            extras={product.extras}\n                            price={product.price}\n                            stock={product.stock}\n                            hide={modalFirstState}\n                            closeProduct={closeProduct}\n                            checkBoxOnChange={props.checkBoxOnChange}\n                            saveUserExtras={props.saveUserExtras}\n                            getExtras={props.getExtras}\n                            product={product}\n                        />\n                    ) \n                }\n            </div>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}