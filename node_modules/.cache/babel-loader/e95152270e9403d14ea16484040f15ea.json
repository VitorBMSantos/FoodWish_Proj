{"ast":null,"code":"var _jsxFileName = \"/Users/vitorsantos/Galileu/Projeto_Front_End/FoodWish_Proj/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport \"@material-tailwind/react/tailwind.css\";\nimport HomePage from './homepage/HomePage';\nimport CheckOutPage from './checkoutpage/CheckOutPage';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [products, setProducts] = useState([]); // products contém todos os produtos recebidos pela API\n\n  const [filterProduct, setFilterProduct] = useState([]); // products contém todos os produtos recebidos pela API\n\n  const [initialValue, setInitialValue] = useState(0); // estado inicial do Carrinho de compras\n\n  const [isChecked, setIsChecked] = useState(false); // estado boleano do checkbox Extras\n\n  const [currentPage, setCurrentPage] = useState(1); // Página em que o utilizador se encontra \n\n  const [modalFirstState, setModaFirstlState] = useState(\"modalContainer1\"); // Estado em que o cartão dos produtos se encontra (display: none)\n\n  const [modalSecondState] = useState(\"modalContainer\"); // Este estado permite que o cartão fique visivel para os utilizadores \n\n  const productsPerPage = 6; // produtos por página\n\n  const maxPageLimit = 3; // Número máximo de paginas \n\n  const minPageLimit = 1; // Número mínimo de páginas \n\n  const [quantity, setQuantity] = useState(1);\n\n  const changePage = page => {\n    // função que reencaminha o utilizador para a página que selecionou \n    setCurrentPage(page.target.id);\n  };\n\n  const previousBtn = () => {\n    // Função que permite o utilizador recuar na paginação \n    if (currentPage - 1 < minPageLimit) {\n      setCurrentPage(minPageLimit);\n    } else {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const nextBtn = () => {\n    // Função que permite o utilizador avançar na paginação\n    if (currentPage + 1 > maxPageLimit) {\n      setCurrentPage(minPageLimit);\n    } else {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const searchProduct = input => {\n    // funação que permite a filtragem de produtos, que permite ao utilizador uma pesquisa rápida e direta face ao que procura \n    let filterProducts = products.filter(product => product.name.toLowerCase().includes(input.target.value.toLowerCase()));\n    setFilterProduct(filterProducts);\n  };\n\n  const pages = []; // Array que contém o número de páginas \n\n  for (let i = 1; i <= Math.ceil(products.length / productsPerPage); ++i) {\n    // For que insere o número de páginas no array pages\n    pages.push(i);\n  }\n\n  const indexlastProduct = currentPage * productsPerPage; // Identifica o último índice da página em que o utilizador se encontra \n\n  const indexFirstProduct = indexlastProduct - productsPerPage; // Identifica o primeiro índice da página em que o utilizador se encontra\n\n  const currentMeals = filterProduct.slice(indexFirstProduct, indexlastProduct); // identifica que produtos são apresentados em cada página (Array de objectos, onde cada objeto se refere à info de cada produto)\n\n  const [productId, setProductId] = useState(1);\n  const product = currentMeals.filter(product => product.id == productId); // Filtra os produtos que se encontram armazenados na variável currentMeals, se corresponderem ao id do producto selecionado, entao a função openProduct (abaixo) irá apresentar o produto selecionado \n\n  const openProduct = product => {\n    setModaFirstlState(modalSecondState);\n    setProductId(product.id);\n  };\n\n  const closeProduct = () => {\n    // função que permite fechar o produto selecionado \n    setModaFirstlState(\"modalContainer1\");\n  };\n\n  const renderProducts = product => {\n    //renderiza todos os cards dos produtos na view\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"itemsCatalog\",\n      children: product.map((product, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"isolatedItems\",\n          id: product.id,\n          onClick: () => openProduct(product),\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: product.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: product.image,\n            alt: product.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 31\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this);\n  };\n\n  const renderPageNumbers = pages.map(number => {\n    // renderiza o layout de mudança de página e suas animações\n    if (number < maxPageLimit + 1 && number >= minPageLimit) {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: currentPage == number ? \"activePage\" : \"disabePage\",\n        id: number,\n        onClick: changePage,\n        children: \".\"\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this);\n    } else {\n      return null;\n    }\n  });\n  let selectedExtra = []; // Array que irá conter os extras selecionados \n\n  const checkBoxOnChange = () => {\n    // função que muda o estado da checkbox\n    setIsChecked(!isChecked);\n  };\n\n  const getExtras = (items, event) => {\n    // função que adiciona ao array selectedExtra os extras selecionados\n    if (selectedExtra.includes(items) && event.target.checked) {\n      selectedExtra.splice(items, 1);\n    } else {\n      selectedExtra.push(items);\n    }\n  };\n\n  const [productInfo, setProductInfo] = useState([]); // Array que irá conter os produtos que o utilizador selecionou \n\n  console.log(productInfo);\n\n  const selectedProduct = product => {\n    // função que adiciona produtos que utilizador pretende comprar ao array productInfo. O spread Operator insere um novo objeto com as info do produto que o utilizador seleciona.\n    product.map(product => {\n      setProductInfo([...productInfo, {\n        id: `${product.id}${initialValue}`,\n        name: product.name,\n        image: product.image,\n        meal: product.meal,\n        extras: selectedExtra,\n        quantity: 1,\n        price: product.price\n      }]);\n    });\n\n    if (initialValue == 0) {\n      // se o valor do saco de compras for 0, assim que o utilizador selecionar um produto faz o incremento do mesmo, caso algum produto seja eliminado do saco de compras irá acontecer um decremento do mesmo, não existindo possibilidade e haver número inferior a 0\n      setInitialValue(productInfo.length + 1);\n    } else if (initialValue == initialValue) {\n      setInitialValue(productInfo.length + 1);\n    }\n  };\n\n  const removeProductFromCheckOut = item => {\n    // função que permite remover o produto do saco de compras \n    let itemId = item.target.id;\n    setProductInfo(productInfo.filter(product => product.id !== itemId));\n    setInitialValue(productInfo.length - 1);\n  };\n\n  const increaseQuantity = product => {\n    // função que permite aumentar a quantidade do produto selecionado \n    setQuantity(product.quantity += 1);\n  };\n\n  const decreaseQuantity = product => {\n    // função que permite diminuir a quantidade do produto selecionado com a condição que quando a quantidade for igual a 1, manter o valor a 1\n    if (product.quantity > 1) {\n      setQuantity(product.quantity -= 1);\n    } else if (product.quantity == 1) {\n      setQuantity(1);\n    }\n  };\n\n  const arrPrice = []; // Array que irá armazenar o preço de todos os produtos selecionados através do map(abaixo)\n\n  productInfo.map(product => arrPrice.push(product.price * product.quantity));\n\n  function getTotal(total, price) {\n    // função que realiza a soma entre o total(representa o valor inicial(a))\n    console.log(total);\n    console.log(price);\n    return total + price;\n  }\n\n  const total = arrPrice.reduce(getTotal, 0);\n  useEffect(() => {\n    fetch(\"https://61e59d49c14c7a0017124d7d.mockapi.io/api/wishCatalog\").then(resp => resp.json()).then(data => {\n      setProducts(data);\n      setFilterProduct(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(HomePage, {\n            initialValue: initialValue,\n            products: products,\n            checked: isChecked,\n            checkBoxOnChange: checkBoxOnChange,\n            getExtras: getExtras,\n            selectedExtra: selectedExtra,\n            modalFirstState: modalFirstState,\n            previousBtn: previousBtn,\n            nextBtn: nextBtn,\n            closeProduct: closeProduct,\n            renderProducts: renderProducts(currentMeals),\n            renderPageNumbers: renderPageNumbers,\n            product: product,\n            productInfo: productInfo,\n            selectedProducts: () => selectedProduct(product),\n            removeProductFromCheckOut: e => removeProductFromCheckOut(e),\n            searchProduct: e => searchProduct(e),\n            increaseQuantity: increaseQuantity,\n            decreaseQuantity: decreaseQuantity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/CheckOutPage\",\n          element: /*#__PURE__*/_jsxDEV(CheckOutPage, {\n            productInfo: productInfo,\n            removeProductFromCheckOut: e => removeProductFromCheckOut(e),\n            quantity: quantity,\n            increaseQuantity: increaseQuantity,\n            decreaseQuantity: decreaseQuantity,\n            total: total\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zbwlkWAx9YVA7TNQEtOfiF2QLqU=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vitorsantos/Galileu/Projeto_Front_End/FoodWish_Proj/src/App.js"],"names":["useEffect","useState","HomePage","CheckOutPage","BrowserRouter","Routes","Route","App","products","setProducts","filterProduct","setFilterProduct","initialValue","setInitialValue","isChecked","setIsChecked","currentPage","setCurrentPage","modalFirstState","setModaFirstlState","modalSecondState","productsPerPage","maxPageLimit","minPageLimit","quantity","setQuantity","changePage","page","target","id","previousBtn","nextBtn","searchProduct","input","filterProducts","filter","product","name","toLowerCase","includes","value","pages","i","Math","ceil","length","push","indexlastProduct","indexFirstProduct","currentMeals","slice","productId","setProductId","openProduct","closeProduct","renderProducts","map","index","image","renderPageNumbers","number","selectedExtra","checkBoxOnChange","getExtras","items","event","checked","splice","productInfo","setProductInfo","console","log","selectedProduct","meal","extras","price","removeProductFromCheckOut","item","itemId","increaseQuantity","decreaseQuantity","arrPrice","getTotal","total","reduce","fetch","then","resp","json","data","e"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport \"@material-tailwind/react/tailwind.css\";\nimport HomePage from './homepage/HomePage'\nimport CheckOutPage from './checkoutpage/CheckOutPage'\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\"\n\nexport default function App() {\n  \n  const [products, setProducts] = useState([]) // products contém todos os produtos recebidos pela API\n\n  const [filterProduct, setFilterProduct] = useState([]) // products contém todos os produtos recebidos pela API\n\n  const [initialValue, setInitialValue] = useState(0) // estado inicial do Carrinho de compras\n\n  const [isChecked, setIsChecked] = useState(false) // estado boleano do checkbox Extras\n\n  const [currentPage, setCurrentPage] = useState(1) // Página em que o utilizador se encontra \n\n  const [modalFirstState, setModaFirstlState] = useState(\"modalContainer1\") // Estado em que o cartão dos produtos se encontra (display: none)\n\n  const [modalSecondState] = useState(\"modalContainer\") // Este estado permite que o cartão fique visivel para os utilizadores \n\n  const productsPerPage = 6 // produtos por página\n\n  const maxPageLimit = 3 // Número máximo de paginas \n\n  const minPageLimit = 1 // Número mínimo de páginas \n\n  const [quantity, setQuantity] = useState(1)\n\n  const changePage = (page) => { // função que reencaminha o utilizador para a página que selecionou \n        setCurrentPage(page.target.id)\n    } \n\n  const previousBtn = () => { // Função que permite o utilizador recuar na paginação \n        if(currentPage - 1 <  minPageLimit){\n            setCurrentPage(minPageLimit)\n        } else {\n            setCurrentPage(currentPage - 1)\n        }\n    }\n\n  const nextBtn = () => { // Função que permite o utilizador avançar na paginação\n        if(currentPage + 1 > maxPageLimit){\n            setCurrentPage(minPageLimit)\n        } else {\n            setCurrentPage(currentPage + 1)\n        }\n    }\n\n  const searchProduct = (input) => { // funação que permite a filtragem de produtos, que permite ao utilizador uma pesquisa rápida e direta face ao que procura \n    let filterProducts = products.filter(product => product.name.toLowerCase().includes(input.target.value.toLowerCase()))\n    setFilterProduct(filterProducts) \n  }\n\n  const pages = [] // Array que contém o número de páginas \n\n    for(let i = 1; i <= Math.ceil(products.length / productsPerPage); ++i) { // For que insere o número de páginas no array pages\n        pages.push(i)\n    }\n\n  const indexlastProduct = currentPage * productsPerPage // Identifica o último índice da página em que o utilizador se encontra \n\n  const indexFirstProduct = indexlastProduct - productsPerPage // Identifica o primeiro índice da página em que o utilizador se encontra\n\n  const currentMeals = filterProduct.slice(indexFirstProduct, indexlastProduct) // identifica que produtos são apresentados em cada página (Array de objectos, onde cada objeto se refere à info de cada produto)\n\n  const [productId, setProductId] = useState(1) \n\n  const product = currentMeals.filter((product) => product.id == productId) // Filtra os produtos que se encontram armazenados na variável currentMeals, se corresponderem ao id do producto selecionado, entao a função openProduct (abaixo) irá apresentar o produto selecionado \n\n  const openProduct = (product) => {\n        setModaFirstlState(modalSecondState)\n        setProductId(product.id)\n  }\n\n  const closeProduct = () => { // função que permite fechar o produto selecionado \n    setModaFirstlState(\"modalContainer1\")\n  }\n\n  const renderProducts = (product) => { //renderiza todos os cards dos produtos na view\n    return(\n        <ul className=\"itemsCatalog\">\n                {\n                    product.map((product, index) => {\n                        return (\n                            <li \n                            className=\"isolatedItems\"\n                            key={index}\n                            id={product.id} \n                            onClick={() => openProduct(product)}\n                            >\n                              <h2>{product.name}</h2>\n                              <img src={product.image} alt={product.name}/>\n                            </li>\n                        )\n                    } )\n                }  \n            </ul>\n        )\n    }\n\n    const renderPageNumbers = pages.map(number => { // renderiza o layout de mudança de página e suas animações\n        if(number < maxPageLimit + 1 && number >= minPageLimit){\n            return (\n                <li\n                className={currentPage == number ? \"activePage\": \"disabePage\"}\n                key={number} \n                id={number}\n                onClick={changePage}\n                >\n                .\n                </li>\n            )\n        } else {\n            return null\n        }\n    })\n  \n  let selectedExtra = [] // Array que irá conter os extras selecionados \n\n  const checkBoxOnChange = () => { // função que muda o estado da checkbox\n   setIsChecked(!isChecked)\n}\n  const getExtras = (items, event) => { // função que adiciona ao array selectedExtra os extras selecionados\n    if(selectedExtra.includes(items) && (event.target.checked)){\n      selectedExtra.splice(items, 1)\n    } else {\n       selectedExtra.push(items)\n    }\n  }\n\n  const [productInfo, setProductInfo] = useState([]) // Array que irá conter os produtos que o utilizador selecionou \n\n  console.log(productInfo )\n\n  const selectedProduct = (product) => { // função que adiciona produtos que utilizador pretende comprar ao array productInfo. O spread Operator insere um novo objeto com as info do produto que o utilizador seleciona.\n      product.map(product => {\n         setProductInfo(\n           [...productInfo, {\n            id: `${product.id}${initialValue}`,\n            name: product.name,\n            image: product.image,\n            meal: product.meal,\n            extras: selectedExtra,\n            quantity: 1,\n            price: product.price \n            }\n          ]\n         )\n      })\n\n      if(initialValue == 0) { // se o valor do saco de compras for 0, assim que o utilizador selecionar um produto faz o incremento do mesmo, caso algum produto seja eliminado do saco de compras irá acontecer um decremento do mesmo, não existindo possibilidade e haver número inferior a 0\n        setInitialValue(productInfo.length + 1)\n      } else if (initialValue == initialValue){\n        setInitialValue(productInfo.length + 1)\n      }\n  }\n\n  const removeProductFromCheckOut = (item) => { // função que permite remover o produto do saco de compras \n   let itemId = item.target.id\n    setProductInfo(productInfo.filter(product => product.id !== itemId))\n    setInitialValue(productInfo.length - 1)\n  }\n\n  const increaseQuantity = (product) => { // função que permite aumentar a quantidade do produto selecionado \n      setQuantity(product.quantity += 1)\n  }\n\n  const decreaseQuantity = (product) => { // função que permite diminuir a quantidade do produto selecionado com a condição que quando a quantidade for igual a 1, manter o valor a 1\n    if(product.quantity > 1) {\n      setQuantity(product.quantity -= 1)\n    } else if(product.quantity == 1) {\n      setQuantity(1)\n    }\n  }\n\n  const arrPrice = [] // Array que irá armazenar o preço de todos os produtos selecionados através do map(abaixo)\n\n  productInfo.map(product => arrPrice.push(product.price * product.quantity))\n\n  function getTotal(total, price) { // função que realiza a soma entre o total(representa o valor inicial(a))\n    console.log(total)\n    console.log(price)\n    return total + price\n    \n  }\n\n const total = arrPrice.reduce(getTotal, 0)\n\n  \n  useEffect(() => { \n        fetch(\"https://61e59d49c14c7a0017124d7d.mockapi.io/api/wishCatalog\")\n        .then((resp) => resp.json())\n        .then((data) => {\n          setProducts(data)\n          setFilterProduct(data)\n        })        \n    }, []) \n    \n  return (\n    <BrowserRouter>\n      <Routes>\n          <>\n            <Route path=\"/\" element= {\n                <HomePage\n                  initialValue={initialValue}\n                  products={products}\n                  checked={isChecked}\n                  checkBoxOnChange={checkBoxOnChange}\n                  getExtras={getExtras}\n                  selectedExtra={selectedExtra}\n                  modalFirstState={modalFirstState}\n                  previousBtn={previousBtn}\n                  nextBtn={nextBtn}\n                  closeProduct={closeProduct}\n                  renderProducts={renderProducts(currentMeals)}\n                  renderPageNumbers={renderPageNumbers}\n                  product={product}\n                  productInfo={productInfo}\n                  selectedProducts={() => selectedProduct(product)}\n                  removeProductFromCheckOut={(e) => removeProductFromCheckOut(e)}  \n                  searchProduct={(e) => searchProduct(e)}  \n                  increaseQuantity={increaseQuantity} \n                  decreaseQuantity={decreaseQuantity}      \n                />\n              }\n            />\n            <Route path=\"/CheckOutPage\" element={\n                <CheckOutPage\n                  productInfo={productInfo}\n                  removeProductFromCheckOut={(e) => removeProductFromCheckOut(e)}\n                  quantity={quantity}\n                  increaseQuantity={increaseQuantity}\n                  decreaseQuantity={decreaseQuantity}\n                  total={total}\n                />\n              } \n            />\n          </>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}